Presentation is on 7/1/16

* invite nathan and sound guys too

? lament of tim curry may make good intro music? play it looping

! code that can be used for offline or real time both?
 * maybe modes should be:
  * real time play
  * real time play + record as wav
  * non real time record as wav
 * maybe more work than is needed
 * maybe just a quick example of how to write a wave file?
  * or point to blog that explains how to do it

! note that much like audio samples, it's the difference in notes that's important.
 ? could show an example.  same sound, shifted a few notes over.

! make the music that brings it all together?
 * maybe make the music as we go? i dunno...

! note that keyboards are bad at pressing multiple keys at once.
 * keyboardsareevil.com

! make the demo 0_BGMusic
 * make it from things you showcase in the demos, so it comes together by the end.
 * demo the bg music again at the end to show how it all came together.

! make sure video recording and room will pick up audio ok.
 * talk to paul haban.

? should we do a stereo demo? not sure if will work in room. should try

Presentation Outline:

--1--
 * title / background music? explaining that bg music was made with the things being talked about.
 * I wanted to make this presentation since paul started doing code & tells, finally got around to it.
 * DEMO = 0_BGMusic

--2--
 * What is audio data?
  * usually from -1.0 to 1.0. (*HDR audio, non floating point, etc)
  * changes in values are what makes sounds, a constant value is silence, no matter what the value is.
  * sound = pressure waves in the air, so speaker needs to move to make changes in pressure.
  * sound value dictates what position the speaker should be at.
  * better speakers are able get to the right places the samples specify more quickly and more accurately.  worse speakers end up with wrong frequencies.
  * resolution:
   * x axis = sample rate. samples per second.
   * y axis = bit depth. bits per sample.
   * may also have multiple channels (like, stereo) data interleaved.

--3--
 * sine wave = gently changing up and down.  all audio data is made of sine waves.
 * more sine waves per second = higher frequency, fewer sine waves per second = lower frequency.
  * show sine tones at diff frequencies
  * demo: press buttons to change frequencies from low to high
  * DEMO = 1_Sine

--4--
 * Note sliding and popping: free spinning oscilators vs not.  audio needs to be smooth!
  * show playing notes one after the other, having popping
  * Note: can also come from changing volume quickly, so need to apply smooth volume over time.
  * demo: let people hear it
  * show the fix: free spinning oscilator
  * show note sliding
  * demo: let people hear it with popping and without.
  * DEMO = 2_Popping

--5--
 * clipping: when things get too high or low, it clips then, making distortion.
  * show clipped sine tones at different volumes
  * sometimes desired though.  Electric guitar distortion takes it's roots from this for instance.
  * demo: play some clipped notes.  adjust volume to make more or less clipping?
  * DEMO = 3_Clipping
  ! Note: sounds "8 bit" cause the taller a sine wave becomes, the more "square wave" it becomes. old systems did square waves cause they are fast to compute!

--6--
 * Mixing: add values together to mix them together and make them both be able to be heard!
  * don't thinks clip? in practice it takes quite a bit to make that happen! manual process to correct levels though. although you can do "automatic volume adjustments" both in real time and "offline" with limiters and compressors
  * don't play at full volume though?
  * demo: polyphonic tones with a decently long envelope. maybe some w/ extra long envelope and cause clipping? button to silence it :P
  * Note: polyphonic
  * Note: turn down volume a bit to keep from clipping. turn volume up to max, show how you can cause clipping.
  * Note: can also kill all but last 3 or 4 notes played.
  * NOTE: this clipping is done 100% in my software.  I'm not maxing out any speakers or anything. no damage
  * DEMO = 4_Mixing

--7--
 * Envelopes
  * show a few examples
  * demo: demo a few examples
  * DEMO = 5_Envelopes

--8--
 * Common wave forms
  * show square, saw, triangle and sine
  * demo: each wave form.  point out how similar sine and triangle are.  triangle was used because sine was too costly to compute.
 * DEMO = 6_WaveForms

--9--
 * Aliasing
  * nyquist frequency
  * bandlimited wave forms (w/ equations?)
  * mention additive synthesis being a way of building up a sound from nothing by adding things together.
  * demo: bandlimited vs not wave forms.
 * DEMO = 7_BLWaveForms

--10--
 * Tremolo & Vibrato
  * Tremolo: modify amplitude on a low frequency sine wave
  * Vibrato: modify frequency on a low frequency sine wave
  * (modular synth = plug anything into anything else, so like, you could plug a saw wave into vibrato etc)
  * demo: some notes with vibrato, some notes with tremolo

--11--
 * Amplitude Modulation Synthesis (AM Synth)
  * Bring tremolo up to audible frequencies!
  * show: what does this wave form look like?
  * demo: play some AM synth notes

--12--
 * Frequency Modulation Synthesis (FM Synth)
  * bring vibrato up to audible frequencies!
  * show: book about it, talk about complexities
  * demo: play some FM synth notes

--13--
 * Delay (echo)
  * talk about having a buffer of the right number of samples with some feedback volume.  Circular buffer.
  * demo: play some notes that are aligned to timing, and some that aren't.

--14--
 * Reverb
  * explain multitap.  mention convolution reverb.  Reference blog post on how to do it.
  * demo: play some sweet sweet notes with multitap reverb
  * could play multitap next to convolution reverb to show difference in quality

--15--
 * Flange
  * explain origins.  explain how to simulate.  talk about sub sample interpolation.  linear, cubic hermite, sync, etc.
  * demo: wave forms with flange.

--16--
 * Basic Drum
  * explain how to do it.
  * demo: step by step to improve it's sound.
  * mention you could use sound clips

--17--
 * Automatic volume adjustments
  * briefly explain compressors and limiters
  * useful for keeping things from clipping
  * also useful to make things "pop out" more. 
  * demo: drums with side chain
  * mention that we do this in heroes
  * mention battlefield's HDR audio system

--18--
 * cymbal from static?
  * a 5th common wave form: "noise"
  * show how to use an envelope to make the noise meaningful
  * demo: play some drums and symbols

--19--
 * Basic LPF and HPF
  * demo: how they sound
  * demo: use them in echo?
  * mention: biquads, IIR/FIR.
  * mention: subtractive synth: use filters to carve the block.  different wave forms have different frequencies at different amplitudes so sound differently when filtered.

--20--
 * Positional sound
  * delay per ear more important than volume changes
  * demo: some 3d sound? does it make sense to do in a large room?  maybe not...

--21--
 * real time vs offline
  * how many ms to not feel a delay? was it 7ms?
  * better effects in offline processing, and can even look into future for cooler sounding effects (like a reverse echo)

-- 22--
 * closing slide
  * shadertoy -> lets you do audio
  * my blog -> more audio synth info there now and future content
  * where to get code from presentation -> https://github.com/Atrix256/MusicSynth

-- stretch topics
 * mention 303 and 707 with a sound clip?
 * FFT / IFFT? do we care? maybe drop this
 * 8 bit music: I'm not an expert, but the sound isn't from being "8 bit".  low sample rate starts to sound like it, but more in faked chords by playing very short notes in a row?
 * arpegiators
 * automatic note timing fixing (to get timing more correct)
 * decibels vs amplitude
 * converting timing (like in 4/4, im on note 3, bar 5) to be a sample number
 * stereo sounds or higher
 * using audio synth for smooth terrain generation.
 * wave file = header, and then just audio samples.
 * yes, can do midi devices. portmidi is a decent library for that. can get velocity so harder presses = louder notes, etc!

==============================================
Topics Brainstorm:
 * audio samples: the delta is what counts, not absolute value
  * amplitude vs db?
 * common wave forms (sine, square, saw, triangle)
 * popping (but useful in some sounds sometimes)
 * clipping (but useful for distortion sounds)
 * bandlimited wave forms and nyquist frequency
 * additive synthesis and mixing
 * vibrato & tremolo effects
 * AM / FM synth basics
 * basic percussion sounds
 * delay (echo) and reverb
 * flange
  * also quick mention of interpolation stuff? linear works for me but...
 * basic filtering and subtractive synthesis
 * dynamics processing (automatic volume adjustments)
  ? HDR audio stuff?
  * simulating in heroes.
 * real time playback vs offline concerns (speed, and buffering causing latency).
  * how many ms does a musician need to make something not feel laggy? was it 7ms?
 * positional audio? using delay per ear more than volume
 * envelopes
 * note sliding
 ? mention shadertoy lets you program audio?
 ! library / programs to do live and offline stuff
 ? mention fft type stuff? quickly, along with pros and cons?

 ! more info on my blog
  * http://blog.demofox.org/category/audio-synthesis/
 